#summary Build Instructions.

= Build Instructions =

This service is built on top of xmlrpc-c, you can either get that through your distro repository, download from their sourceforge page, or check out from their repository. I compile against their 'advanced' branch, which is version 1.24.0 at the moment. Follow their instructions on how to install their stuff.

After you check my source out, you should first try 'which xmlrpc-c-config' and make sure that's the one you want to use. If there isn't one, you should either add its location to your path or you can edit it in manually in drmaa-xmlrpc/makefile. You'll also need at least libdrmaa-dev package to compile. After that you can run 'make all' at the top level and you should have an executable drmaa-xmlrpc/drmaa-xmlrpc. There should also be a sample conf file. By default it'll look for that filename in the current working directory or override that with 'drmaa-xmlrpc --conf-file /path/to/your/conf-file'

=== OLD PROCEDURE, DEPRECATED 10/13/2010: ===

This is how it works at the moment:
<li>The makefiles can do 'all', 'clean', and 'install'
<li>Dependencies of sub-folders is foreach depends on nothing; config depends on foreach; drmaa-xmlrpc depends on config, xmlrpc-c, and libdrmaa
<li>'make install' at the top level will first put foreach and config headers and static libraries into ~/include and ~/lib respectively. config will look for foreach stuff there, so if you just create those folders it should get you this far. After that it will try to compile drmaa-xmlrpc and put the executable in ~/bin. For this step to succeed, you will need:
<br>a) xmlrpc-c in some way, whether you just get it from your repository or download a specific version, once you have it you should have xmlrpc-c-config executable somewhere on your system, you can edit drmaa-xmlrpc/makefile and set XMLRPC_C_CONFIG variable to its location
<br>and b) libdrmaa, you can compile everything without actually having something like SGE on the machine, just libdrmaa-dev from your repository. It won't work because drmaa_init() will fail, but it should compile and run, setting log_mask = -1 and log_file = /path/to/file should execute and spit out the drmaa_init failure to the log file.